const express = require('express');
const router = express.Router();
const User = require('../mongoose/modeluser');
const bcrypt = require('bcrypt'); // For password hashing
const jwt = require('jsonwebtoken');

// Secret key for JWT (store this securely, preferably in an environment variable)
const JWT_SECRET = process.env.JWT_SECRET || 'llavesecreta';

router.post('/register', async (req, res) => {
  try {
    const { contrasena, ...otherUserData } = req.body;

    // Check if the password is provided
    if (!contrasena) {
      return res.status(400).json({ message: 'Password is required' });
    }

    // Hash the password
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(contrasena, saltRounds);

    // Create a new user with the hashed password
    const newUser = new User({
      ...otherUserData,
      contrasena: hashedPassword
    });

    // Save the user to the database
    await newUser.save();

    // Respond with success message (don't include the password in the response)
    res.status(201).json({ 
      message: 'User created successfully', 
      userId: newUser._id,
      usuario: newUser.usuario
    });

  } catch (error) {
    // Handle specific errors
    if (error.code === 11000) {
      // Duplicate key error (e.g., username or email already exists)
      return res.status(409).json({ message: 'User already exists' });
    }

    // Generic error handling
    console.error('Error registering user:', error);
    res.status(400).json({ message: 'Error creating user', error: error.message });
  }
});


// Route to validate user credentials
router.post('/login', async (req, res) => {
  try {
    const { usuario, contrasena } = req.body;

    if (!usuario || !contrasena) {
      return res.status(400).json({ message: 'Username and password are required' });
    }

    // Find the user by username
    const user = await User.findOne({ usuario });

    if (!user) {
      return res.json({ valid: false, message: 'Invalid username or password' });
    }

    // Compare the provided password with the stored hash
    const isPasswordValid = await bcrypt.compare(contrasena, user.contrasena);

    if (isPasswordValid) {
      // Generate JWT token
      const token = jwt.sign(
        { userId: user._id, username: user.usuario },
        JWT_SECRET,
        { expiresIn: '1h' } // Token expires in 1 hour
      );
      res.json({
        message: 'Login successful',
        token: token,
        userId: user._id,
        tipoUsuario: user.tipodeusuario,
        username: user.usuario
      });
      //res.json({ valid: true, message: 'User credentials are valid' });
    } else {
      res.json({ valid: false, message: 'Invalid username or password' });
    }
  } catch (error) {
    console.error('Error validating user:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Protected route example
router.get('/protected', authenticateToken, (req, res) => {
  res.json({ message: 'You have access to this protected route', user: req.user });
});

// Middleware to authenticate token
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (token == null) return res.sendStatus(401);

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}


// router.post('/register', async (req, res) => {
//   try {
//     const newUser = new User(req.body);
//     await newUser.save();
//     res.status(201).json({ message: 'User created successfully', userId: newUser._id });
//   } catch (error) {
//     res.status(400).json({ message: 'Error creating user', error: error.message });
//   }
// });

module.exports = router;

